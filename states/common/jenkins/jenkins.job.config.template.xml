<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>{{ job_description }}</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <!-- TODO: Add support for Subverion later when things work with Git.
  <scm class="hudson.scm.SubversionSCM">
    <locations>
      <hudson.scm.SubversionSCM_-ModuleLocation>
        <remote>http://svn/repos/path/to/repo</remote>
        <local>control</local>
      </hudson.scm.SubversionSCM_-ModuleLocation>
    </locations>
    <excludedRegions></excludedRegions>
    <includedRegions></includedRegions>
    <excludedUsers></excludedUsers>
    <excludedRevprop></excludedRevprop>
    <excludedCommitMessages></excludedCommitMessages>
    <workspaceUpdater class="hudson.scm.subversion.UpdateWithCleanUpdater"/>
  </scm>
  -->
  <assignedNode>{{ job_assigned_host }}</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(Default)</jdk>
  <triggers class="vector"/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <!--
        TODO: Use Shell or Bat depending on job configuration
    -->
    <hudson.tasks.Shell>
      <command>

{% set control_scripts_dir_basename = pillar['system_features']['deploy_environment_sources']['control_scripts_dir_basename'] %}
{% set control_scripts_repo_name = pillar['system_features']['deploy_environment_sources']['control_scripts_repo_name'] %}
{% set control_scripts_dir_path = pillar['system_features']['deploy_environment_sources']['control_scripts_dir_path'] %}
{% set selected_repo_type = pillar['system_features']['deploy_environment_sources']['source_repo_types'][control_scripts_repo_name] %}
{% set repo_types = pillar['system_features']['deploy_environment_sources']['source_repo_types'] %}

{% if 'override_git_repo_local_paths' in job_config %}
{% set git_repo_local_paths = job_config['override_git_repo_local_paths'] %}
{% else %}
{% set git_repo_local_paths = pillar['system_features']['deploy_environment_sources']['git_repo_local_paths'] %}
{% endif %}

{% if os_type == 'linux' %}
{% set control_sripts_repo_dir =  pillar['system_features']['deploy_environment_sources']['environment_sources_location']['linux']['path'] + '/' + control_scripts_repo_name + "." + selected_repo_type  %}
{% elif os_type == 'windows' %}
{% set control_sripts_repo_dir = pillar['system_features']['deploy_environment_sources']['environment_sources_location']['windows']['path_cygwin'] + '/' + control_scripts_repo_name + "." + selected_repo_type %}
{% endif %}

# Use control scripts via a symlink to existing sources:
ln -s -f "{{ control_sripts_repo_dir }}/{{ control_scripts_dir_path }}" "{{ control_scripts_dir_basename }}"

# Override via command line:
# - Use preferred repo type: {{ repo_types }}
# - For Git, use common repo: {{ git_repo_local_paths }}
/usr/bin/python control/init.py -j {{ job_name }} -l debug -c {{ control_url }} --repo_types='{{ repo_types|json }}' --override_git_repo_local_paths='{{ git_repo_local_paths|json }}'
      </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>

    {% if job_config['collect_results']['enabled'] %}
    <hudson.tasks.junit.JUnitResultArchiver>
      <testResults>{{ job_config['collect_results']['path_glob'] }}</testResults>
      <keepLongStdio>false</keepLongStdio>
      <testDataPublishers/>
    </hudson.tasks.junit.JUnitResultArchiver>
    {% endif %}

    <!-- TODO
    <hudson.tasks.BuildTrigger>
      <childProjects>C755A-Build-Windows, C755A-CppUnitTests</childProjects>
      <threshold>
        <name>SUCCESS</name>
        <ordinal>0</ordinal>
        <color>BLUE</color>
      </threshold>
    </hudson.tasks.BuildTrigger>
    -->
    <!-- TODO
    <xunit>
      <types>
        <JUnitType>
          <pattern>shared/test/cpptests/*.xml</pattern>
          <faildedIfNotNew>true</faildedIfNotNew>
          <deleteOutputFiles>true</deleteOutputFiles>
          <stopProcessingIfError>true</stopProcessingIfError>
        </JUnitType>
      </types>
      <thresholds>
        <org.jenkinsci.plugins.xunit.threshold.FailedThreshold>
          <unstableThreshold></unstableThreshold>
          <unstableNewThreshold></unstableNewThreshold>
          <failureThreshold></failureThreshold>
          <failureNewThreshold></failureNewThreshold>
        </org.jenkinsci.plugins.xunit.threshold.FailedThreshold>
        <org.jenkinsci.plugins.xunit.threshold.SkippedThreshold>
          <unstableThreshold></unstableThreshold>
          <unstableNewThreshold></unstableNewThreshold>
          <failureThreshold></failureThreshold>
          <failureNewThreshold></failureNewThreshold>
        </org.jenkinsci.plugins.xunit.threshold.SkippedThreshold>
      </thresholds>
    </xunit>
    -->
    <!-- TODO
    <hudson.tasks.Mailer>
      <recipients>person@example.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>true</sendToIndividuals>
    </hudson.tasks.Mailer>
    -->
  </publishers>
  <buildWrappers/>
</project>

