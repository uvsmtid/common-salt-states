<?xml version='1.0' encoding='UTF-8'?>
<project>

  {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_job_configuration with context %}
  {{ common_job_configuration(job_config, job_environ) }}

  <builders>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import copy_artifacts with context %}
    {{ copy_artifacts(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import add_job_environment_variables with context %}
    {{ add_job_environment_variables(job_config, job_environ) }}

    <hudson.tasks.Shell>
      <command>

        {% from 'common/libs/host_config_queries.sls' import get_system_host_primary_user_posix_home with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import locate_dynamic_build_descriptor with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import update_dynamic_build_descriptor with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_header with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_footer with context %}

        #######################################################################
        # Script header

        {{ common_build_script_header(job_config, job_environ) }}

        #######################################################################
        # Locate dynamic build descriptor.

        {{ locate_dynamic_build_descriptor(job_config, job_environ) }}

        #######################################################################
        # Load additional macros.

        # TODO

        #######################################################################
        # Select target.

        BOOTSTRAP_TARGET_ENVIRONMENT="${TARGET_PROFILE_NAME:-}"
        if [ -z "${BOOTSTRAP_TARGET_ENVIRONMENT}" ]
        then
            # No selected target environment. Use local environment then.
            BOOTSTRAP_TARGET_ENVIRONMENT="${SALT_PROFILE_NAME}"
        fi

        #######################################################################
        # Store bootstrap package.

        # This job is supposed to store (i.g. upload) package.
        # Currently, it only saves it in specified directory.

        # Select source directory or file. This depends on whether only
        # content directory exists or package file was generated.
        # TODO: It doesn't seem right that package type (archive type)
        #       depends on any platform. What if there are multiple
        #       platforms within a system, will there be multiple packages?
        #       The whole idea about bootstrap is to have single package
        #       per system instance.
        {% set selected_host_name = grains['id'] %}
        {% set package_type = pillar['system_features']['static_bootstrap_configuration']['os_platform_package_types'][pillar['system_hosts'][selected_host_name]['os_platform']] %}
        {% set bootstrap_dir_basename = pillar['system_features']['static_bootstrap_configuration']['bootstrap_files_dir'] %}
        {% if not pillar['system_features']['source_bootstrap_configuration']['generate_packages'] %} # generate_packages
        {% set bootstrap_source_path = bootstrap_dir_basename + '/targets/' + pillar['project_name'] %}
        # Source is bootstrap package file.
        BOOTSTRAP_SOURCE_PATH="{{ bootstrap_source_path }}/${BOOTSTRAP_TARGET_ENVIRONMENT}/salt-auto-install.{{package_type}}"
        {% else %} # generate_packages
        {% set bootstrap_source_path = bootstrap_dir_basename + '/packages/' + pillar['project_name'] %}
        # Source is bootstrap content directory.
        BOOTSTRAP_SOURCE_PATH="{{ bootstrap_source_path }}/${BOOTSTRAP_TARGET_ENVIRONMENT}"
        {% endif %} # generate_packages

        BOOTSTRAP_DESTINATION_PATH="{{ pillar['system_features']['jenkins_generated_bootstrap']['rel_path_to_generated_bootstrap_packages'] }}/${BUILD_TITLE}"

        # The paths are relative to user's home dir.
        cd ~

        # Make sure source directory exists.
        ls -lrtd "${BOOTSTRAP_SOURCE_PATH}"

        # Make sure destination directory exists.
        mkdir -p "${BOOTSTRAP_DESTINATION_PATH}"

        # Copy bootstrap content/package to destination.
        cp -rp "${BOOTSTRAP_SOURCE_PATH}" "${BOOTSTRAP_DESTINATION_PATH}"

        #######################################################################
        # Script footer

        {{ common_build_script_footer(job_config, job_environ) }}

        #######################################################################

      </command>
    </hudson.tasks.Shell>
  </builders>

  <publishers>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import archive_artifacts with context %}
    {{ archive_artifacts(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import parameterized_job_triggers_macro with context %}
    {{ parameterized_job_triggers_macro(job_config, job_environ) }}

  </publishers>

  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.7.2"/>
  </buildWrappers>

</project>

