<?xml version='1.0' encoding='UTF-8'?>
<project>

  {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_job_configuration with context %}
  {{ common_job_configuration(job_config, job_environ) }}

  {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import job_multiple_scm_configuration with context %}
  {{ job_multiple_scm_configuration(job_config, job_environ) }}

  <builders>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import copy_artifacts with context %}
    {{ copy_artifacts(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import add_job_environment_variables with context %}
    {{ add_job_environment_variables(job_config, job_environ) }}

    <hudson.tasks.Shell>
      <command>

        {% from 'common/libs/host_config_queries.sls' import get_system_host_primary_user_posix_home with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import locate_dynamic_build_descriptor with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import update_dynamic_build_descriptor with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_header with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_footer with context %}

        #######################################################################
        # Script header

        {{ common_build_script_header(job_config, job_environ) }}

        #######################################################################
        # Run orchestrate to make sure states across minions
        # are executed in proper order.

        # Use `check_running_jobs.sh` script to wait for
        # completion of all jobs.
        {% set common_states_repo_id = 'common-salt-states' %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][common_states_repo_id]['git'] %}
        export COMMON_STATES_REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        # Do not run (wait) until `test.ping` returns within 5 seconds.
        # There is an issue when Salt minion service has just rebooted
        # and may not be able to return results yet. In this case
        # the first job runs for minutes (and it is not clear whether it
        # finally does what was requested).
        RET_VAL="1"
        COUNTER="0"
        while [ "${RET_VAL}" != "0" ]
        do
            COUNTER="$((COUNTER + 1))"
            set +e
            sudo timeout 5 salt '*' test.ping
            RET_VAL="${?}"
            set -e
            # Fail after too many attempts.
            if [ "${COUNTER}" -gt "100" ]
            then
                exit 1
            fi
        done

        {% if 'neglect_run_salt_orchestrate_error_state' in job_config and job_config['neglect_run_salt_orchestrate_error_state'] %}
        set +e
        {% endif %}

        # By the way, even if the following commands provide `test=False`
        # argument, as of now it is simply ignored - see:
        #    https://github.com/saltstack/salt/issues/24209
        
        # Run orchestrate with error detection in JSON output.
        # This is not supposed to fail -
        # therefore, salt.output.json gets verified subsequently.
        sudo salt-run \
            --out json \
            -l debug \
            state.orchestrate common.orchestrate.run_all_stages \
            test=False | tee salt.output.json

        # Loop (wait) until all jobs complete.
        while ( sudo "${COMMON_STATES_REPO_PATH}"/scripts/check_running_jobs.sh )
        do
            sleep 10
        done

        # TODO: What if `salt-run` timeout on waiting for response?
        #       Checking output as the next step doesn't make sense.
        #       Instead, waiting on all job completion is the best option.
        #       However, how can we get output of the job
        #       if we don't know job_id? So, at the moment the only
        #       case when checking the output below makes sense is when
        #       `salt-run` does not timeout.

        # Capture errors from Salt.
        # At the moment salt does not return exit/error code.
        # See: https://github.com/saltstack/salt/issues/18510
        /srv/states/bootstrap/bootstrap.dir/modules/utils/check_salt_output.py \
            salt.output.json

        # Enable back error detection if it was disabled above.
        set -e

        #######################################################################
        # Script footer

        {{ common_build_script_footer(job_config, job_environ) }}

        #######################################################################

      </command>
    </hudson.tasks.Shell>
  </builders>

  <publishers>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import archive_artifacts with context %}
    {{ archive_artifacts(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import parameterized_job_triggers_macro with context %}
    {{ parameterized_job_triggers_macro(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import send_email_notifications with context %}
    {{ send_email_notifications(job_config, job_environ) }}

  </publishers>

  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.7.2"/>
  </buildWrappers>

</project>

