<?xml version='1.0' encoding='UTF-8'?>
<project>

  {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_job_configuration with context %}
  {{ common_job_configuration(job_config, job_environ) }}

  {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import job_multiple_scm_configuration with context %}
  {{ job_multiple_scm_configuration(job_config, job_environ) }}

  <builders>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import copy_artifacts with context %}
    {{ copy_artifacts(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import add_job_environment_variables with context %}
    {{ add_job_environment_variables(job_config, job_environ) }}

    <hudson.tasks.Shell>
      <command>

        {% from 'common/libs/host_config_queries.sls' import get_system_host_primary_user_posix_home with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import locate_dynamic_build_descriptor with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import update_dynamic_build_descriptor with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_header with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_footer with context %}

        #######################################################################
        # Script header

        {{ common_build_script_header(job_config, job_environ) }}

        #######################################################################
        # Check that specified author is able to commit in every repository.
        # In addition to that, verify other states of repositories
        # depending on build type.

        {% for repo_name in pillar['system_features']['deploy_environment_sources']['source_repositories'].keys() %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][repo_name]['git'] %}
        REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        cd "${REPO_PATH}"

        if [ "${RESTORE_PARENT_BUILD_ONLY}" != "true" ]
        then
            # Check ability to commit by the specified author.
            TEMP_FILE_NAME="${SALT_PROFILE_NAME}-$(date "+%Y-%m-%dT%H-%M-%S.%N")"
            touch "${TEMP_FILE_NAME}"
            git add "${TEMP_FILE_NAME}"
            set +e
            git commit --dry-run --author="${AUTO_COMMIT_GIT_AUTHOR_EMAIL}"
            RET_VAL="${?}"
            set -e
            git reset "${TEMP_FILE_NAME}"
            rm "${TEMP_FILE_NAME}"
            test "${RET_VAL}" == "0"
        else
            # In case of `RESTORE_PARENT_BUILD_ONLY`,
            # there should be nothing to commit.
            true
        fi

        # Check for local modifications.
        if [ "${RESTORE_PARENT_BUILD_ONLY}" != "true" ]
        then
            # There is nothing to do for normal build.
            # Any state of repositories is possible -
            # restore points will be used.
            # Display status.
            git status
        else
            # Make sure repositories have no local modifications
            # in case of `RESTORE_PARENT_BUILD_ONLY`.

            # NOTE: Without `add --all` `diff-index` will not notice untracked files.
            git add --all

            # Display status.
            git status

            # Only "clean and dry" repositories are allowed.
            # (except new commits in submodules).
            git diff-index --ignore-submodules=all --exit-code HEAD

        fi

        git reset

        cd -

        {% endfor %}

        #######################################################################
        # Set build title.

        # Quick fix:
        # Only one of these three variables is supposed to be set.
        export BUILD_LABEL="${BUILD_LABEL:-}${PACKAGE_LABEL:-}${RELEASE_LABEL:-}"

        {% from 'common/libs/repo_config_queries.lib.sls' import get_repository_id_by_role with context %}
        {% set build_history_repo_id = get_repository_id_by_role('build_history_role') %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][build_history_repo_id]['git'] %}
        export REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"
        cd "${REPO_PATH}"

        # There are three types of builds:
        # - Build which starts the initial build
        #   (initial dynamic build descriptor).
        #   This is only `init_pipeline.start_new_build`.
        # - Build which continue from where the previous build stop
        #   using parent build title to copy dynamic build descriptor.
        #   Example is `package_pipeline.create_new_package`.
        # - Build which continue from _some_ previous build
        #   by guessing any parent build title
        #   Example is `checkout_pipeline.checkout_build_branches`.
        if [ "${RESTORE_PARENT_BUILD_ONLY}" != "true" ]
        then
            # Initialize new build title.
            BUILD_TIMESTAMP="$(date "+%Y-%m-%dT%H-%M-%S")"
            SOURCE_PROFILE_NAME="${SALT_PROFILE_NAME}"
            export BUILD_TITLE="${BUILD_TIMESTAMP}-{{ job_environ['job_name'] }}-${BUILD_NUMBER}-${SOURCE_PROFILE_NAME}-${BUILD_LABEL}"
        else
            # In case of `RESTORE_PARENT_BUILD_ONLY`,
            # make sure that `PARENT_BUILD_TITLE` is set
            # (otherwise pick the latest build title as parent one).
            if [ "${PARENT_BUILD_TITLE}" == '_' ]
            then
                # NOTE: Branches named after build title must conform to
                #       convention where root of the tree has to have
                #       a directory named after this branch (build title).
                #       If the selected branch somehow does not have
                #       required directory in its root, the process will
                #       fail because dynamic build descriptor won't be
                #       found (in this directory). This shouldn't happen
                #       often because cases when PARENT_BUILD_TITLE is not
                #       specified mostly run automatically _after_ regular
                #       build which creates proper build-titled branch.
                # Select branch name by the most recent commit
                # which belongs to `init_pipeline.start_new_build` which
                # has to have dynamic build descriptors listed in
                # `restore_artifacts_from_parent_build` for the case
                # `RESTORE_PARENT_BUILD_ONLY==true` which is belongs only
                # to `checkout_pipeline`.
                # See:
                #   http://stackoverflow.com/a/5972362/441652
                export PARENT_BUILD_TITLE="$(git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short)' | grep 'init_pipeline.start_new_build' | head -n 1)"
            fi

            export BUILD_TITLE="${PARENT_BUILD_TITLE}"
        fi

        cd -

        #######################################################################
        # Set env vars.

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import locate_repository_dynamic_build_descriptor with context %}
        {{ locate_repository_dynamic_build_descriptor(job_config, job_environ, check_repo_dyn_build_desc = False) }}

        #######################################################################
        # Import additional marco.

        {% from 'common/libs/repo_config_queries.lib.sls' import get_repository_id_by_role with context %}

        #######################################################################
        # Make sure target profile pillars repo has required branch.

        {% set target_profile_repo_id = get_repository_id_by_role('target_profile_pillars_role') %}

        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][target_profile_repo_id]['git'] %}
        export TARGET_PROFILE_REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        # NOTE: `TARGET_PROFILE_NAME` is only defined for `package_pipeline`.
        #       For all other cases (when `TARGET_PROFILE_NAME` is undefined)
        #       it should match (source) `SALT_PROFILE_NAME`.
        cd "${TARGET_PROFILE_REPO_PATH}"
        if [ -n "${TARGET_PROFILE_NAME:-}" ]
        then
            git rev-parse --verify "${TARGET_PROFILE_NAME}"
        else
            git rev-parse --verify "${SALT_PROFILE_NAME}"
        fi
        cd -

        #######################################################################
        # Initialize repository build descriptor.


        cd "${REPO_DYN_BUILD_DESC_REPO_PATH}"

        # Make sure `build_history_role` is clean.
        # NOTE: Without `add -all` `diff-index` will not notice untracked files.
        git add --all
        git diff-index --ignore-submodules=dirty --exit-code HEAD

        # Create build branch in `build_history_role`.
        # Creating build branches for other repositories is later -
        # `build_history_role` is special one which requires tracking
        # build from the start of the pipeline.
        if [ "${PARENT_BUILD_TITLE}" != '_' ]
        then
            # Start from state of the branch as it was left in parent build.
            # NOTE: If parent build title is used, its directory
            #       with all contents is left untouched.

            if [ "${RESTORE_PARENT_BUILD_ONLY}" != "true" ]
            then
                # Check out...
                #   parent build branch (parent build title)
                # as...
                #   new build branch (new build title)
                # and make copy of...
                #   directory named after parent build title
                # to new...
                #   directory named after new build title.
                git checkout -b "${BUILD_TITLE}" "${PARENT_BUILD_TITLE}"
                cp -r "${PARENT_BUILD_TITLE}" "${BUILD_TITLE}"
            else
                # In case of `RESTORE_PARENT_BUILD_ONLY`,
                # check out parent build title branch and do nothing else.
                git checkout "${PARENT_BUILD_TITLE}"
            fi

        else
            # No parent - start from clean orphan branch.

            # NOTE: Orphan branch is used making it unnecessary to
            #       recover from failed builds into original branch.
            # See: http://stackoverflow.com/a/5690048/441652
            git checkout --orphan "${BUILD_TITLE}"
            git rm -rf .
            git clean -xdf

            # Create destination directory.
            mkdir -p "$(dirname "${REPO_DYN_BUILD_DESC_PATH}")"
        fi

        if [ "${RESTORE_PARENT_BUILD_ONLY}" != "true" ]
        then

            # Reuse previous dynamic build descriptor.
            # Update initial data.
            # All other data will be updated in subsequent jobs.

            # Initialize file (if empty) with unique key `${BUILD_TITLE}`.
            # The unique key is needed to make sure that adding new key
            # does not create duplicate keys in dictionary.
            echo                     "" >> "${REPO_DYN_BUILD_DESC_PATH}"
            echo "${BUILD_TITLE}: init" >> "${REPO_DYN_BUILD_DESC_PATH}"
            echo                     "" >> "${REPO_DYN_BUILD_DESC_PATH}"

            echo "${BUILD_TIMESTAMP}"     | python "${KEY_SETTER_PYTHON_SCRIPT}" "${REPO_DYN_BUILD_DESC_PATH}" "build_timestamp"
            echo "${BUILD_TITLE}"         | python "${KEY_SETTER_PYTHON_SCRIPT}" "${REPO_DYN_BUILD_DESC_PATH}" "build_title"
            echo "${SOURCE_PROFILE_NAME}" | python "${KEY_SETTER_PYTHON_SCRIPT}" "${REPO_DYN_BUILD_DESC_PATH}" "source_profile_name"

            echo "${BUILD_TITLE}"         | python "${KEY_SETTER_PYTHON_SCRIPT}" "${REPO_DYN_BUILD_DESC_PATH}" "build_branches:{{ build_history_repo_id }}"
            echo "${BUILD_TITLE}"         | python "${KEY_SETTER_PYTHON_SCRIPT}" "${REPO_DYN_BUILD_DESC_PATH}" "initial_branches:{{ build_history_repo_id }}"

            # Make initial commit.
            git add --all
            git commit --author "${AUTO_COMMIT_GIT_AUTHOR_EMAIL}" -m "Initialize build history: ${BUILD_TITLE}"

            CURRENT_COMMIT_ID="$(git rev-parse --verify HEAD)"
            echo "${CURRENT_COMMIT_ID}"  | python "${KEY_SETTER_PYTHON_SCRIPT}" "${REPO_DYN_BUILD_DESC_PATH}" "initial_commit_ids:{{ build_history_repo_id }}"

        else

            # NOTE: In case of `RESTORE_PARENT_BUILD_ONLY`,
            #       the operation is read-only.

            echo "Nothing to do."
        fi

        git reset

        cd -

        #######################################################################
        # Locate dynamic build descriptor.

        # NOTE: We don't check existance of initital dyn build desc
        #       only for initial job in the entire pipeline.
        {{ locate_dynamic_build_descriptor(job_config, job_environ, check_init_dyn_build_desc = False) }}

        # This is the first job in the init_pipeline.
        # Clean contents of the latest dyn build desc.
        cp "${REPO_DYN_BUILD_DESC_PATH}" "${LATEST_DYN_BUILD_DESC_PATH}"

        # Clean job dyn build desc as well. Unlike other jobs, this one
        # is the first in entire "global" pipeline and inherits no
        # info from the previous jobs.
        cp "${REPO_DYN_BUILD_DESC_PATH}" "${JOB_DYN_BUILD_DESC_PATH}"

        # Remove any parent dyn build desc as it is not yet identified.
        rm -f "${PARENT_DYN_BUILD_DESC_PATH}"

        # There must be no sign of produced artifact at the start.
        {% if 'restore_artifacts_from_parent_build' in job_config %}
        {% for produced_artifact in job_config['restore_artifacts_from_parent_build'] %}
        rm -f '{{ produced_artifact }}'
        {% endfor %}
        {% endif %}

        # There must be no sign of initial build descriptor.
        {% if 'initial_dynamic_build_descriptor' in job_config %}
        # Produce initial dynamic build descriptor.
        rm -f '{{ job_config['initial_dynamic_build_descriptor'] }}'
        {% endif %}

        #######################################################################
        # Restore parent build descriptor.

        if [ "${PARENT_BUILD_TITLE}" != '_' ]
        then

            # Export (the latest) dynamic build descriptor from
            # specified parent build title (branch).
            # See:
            #    http://stackoverflow.com/a/5324532/441652
            git archive --remote="${REPO_DYN_BUILD_DESC_REPO_PATH}" "${PARENT_BUILD_TITLE}":"${PARENT_BUILD_TITLE}" | tar -x 'dynamic_build_descriptor.yaml'
            mv 'dynamic_build_descriptor.yaml' "${PARENT_DYN_BUILD_DESC_PATH}"

            {% if 'restore_artifacts_from_parent_build' in job_config %}
            # Restore artifacts which might be used as a fingerprint
            # to link all jobs together.
            {% for restored_artifact in job_config['restore_artifacts_from_parent_build'] %}
            git archive --remote="${REPO_DYN_BUILD_DESC_REPO_PATH}" "${PARENT_BUILD_TITLE}":"${PARENT_BUILD_TITLE}" | tar -x '{{ restored_artifact }}'
            {% endfor %}
            {% endif %}

        fi

        #######################################################################
        # Write environment variables into dynamic build descriptor.

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import store_environment_python_script with context %}

        # TODO: Filter sensitive environment variables.

        # In-place Python script. Write it into a file to be executed later.
        ENV_PYTHON_SCRIPT=$(mktemp)
cat &lt;&lt;HEREDOC_MARKER &gt; ${ENV_PYTHON_SCRIPT}
{{ store_environment_python_script(job_config, job_environ) }}
HEREDOC_MARKER

        # NOTE: In case of `RESTORE_PARENT_BUILD_ONLY`,
        #       the operation is read-only.
        if [ "${RESTORE_PARENT_BUILD_ONLY}" != "true" ]
        then
            # Write output of env command into dynamic build descriptor.
            python "${ENV_PYTHON_SCRIPT}" "${JOB_DYN_BUILD_DESC_PATH}"
        fi

        #######################################################################
        # Write parameters to the file used by subsequent jobs.

        # NOTE: The properties are pretty useless at the moment.
        #       All information is exchanged through dyn build desc.

        # Locate and create clean properties file.
        BUILD_PROPS_PATH='{{ job_environ['jenkins_dir_path'] }}/build_pipeline/build.properties'
        mkdir -p "$(dirname "$BUILD_PROPS_PATH")"
        echo > "$BUILD_PROPS_PATH"

        # Write each build parameter into the properties file.
        {% for job_config_key in [
                'build_parameters',
                'preset_build_parameters',
            ]
        %}
        {% if job_config_key in job_config %}
        {% for param_name in job_config[job_config_key].keys() %}

        # NOTE: If parameter is undefined, empty string is used.
        echo "{{ param_name }}=${ {{- param_name -}} :-}" >> "$BUILD_PROPS_PATH"

        # NOTE: In case of `RESTORE_PARENT_BUILD_ONLY`,
        #       the operation is read-only.
        if [ "${RESTORE_PARENT_BUILD_ONLY}" != "true" ]
        then
            # Even though build parameters are part of environment variables,
            # save them into special section of dynamic build descriptor.
            echo "${{ param_name }}" | python ${KEY_SETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_parameters:{{ param_name }}"
        fi

        {% endfor %}
        {% endif %}
        {% endfor %}

        # In addition to that, store BUILD_TITLE.
        echo "BUILD_TITLE=${BUILD_TITLE}" >> "$BUILD_PROPS_PATH"

        #######################################################################
        # Update dynamic build descriptor.

        {% if 'initial_dynamic_build_descriptor' in job_config %}

        # Produce initial dynamic build descriptor.
        cp "${JOB_DYN_BUILD_DESC_PATH}" "{{ job_config['initial_dynamic_build_descriptor'] }}"

        # Copy initial dyn build desc into
        # `build_history_role` repository.
        # This is needed to be able to specify current build as
        # parent build in the future.
        if [ "${RESTORE_PARENT_BUILD_ONLY}" != "true" ]
        then
            cp "{{ job_config['initial_dynamic_build_descriptor'] }}" "${REPO_DYN_BUILD_DESC_REPO_PATH}/${BUILD_TITLE}"
        else
            # In case of `RESTORE_PARENT_BUILD_ONLY`,
            # do not copy anything (which makes `build_history_role` dirty).
            # There is no need to rebuild `checkout_pipeline` builds.
            true
        fi

        {% endif %}

        {{ update_dynamic_build_descriptor(job_config, job_environ) }}

        {% if 'restore_artifacts_from_parent_build' in job_config %}

        # Make sure all other artifacts producible by this first job
        # (for fingerprinting) are present.
        # NOTE: When parent build title is not provided, some artifacts
        #       for associations through fingerprints cannot be recovered.
        #       Fail only if both artifact and parent build title are absent.
        {% for produced_artifact in job_config['restore_artifacts_from_parent_build'] %}
        if ! ls -l "{{ produced_artifact }}"
        then
            if [ "${PARENT_BUILD_TITLE}" != '_' ]
            then
                # Parent build title present but required artifact is not
                # "produced" from this old parent build. Fail.
                ls -l "{{ produced_artifact }}"
            fi
        fi
        {% endfor %}

        {% endif %}

        #######################################################################
        # Script footer

        {{ common_build_script_footer(job_config, job_environ) }}

        #######################################################################

      </command>
    </hudson.tasks.Shell>
  </builders>

  <publishers>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import archive_artifacts with context %}
    {{ archive_artifacts(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import parameterized_job_triggers_macro with context %}
    {{ parameterized_job_triggers_macro(job_config, job_environ) }}

  </publishers>

  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.7.2"/>
  </buildWrappers>

</project>

