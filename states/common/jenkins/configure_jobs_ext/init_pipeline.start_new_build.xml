<?xml version='1.0' encoding='UTF-8'?>
<project>

  {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_job_configuration with context %}
  {{ common_job_configuration(job_config, job_environ) }}

  <builders>

    {#
    DISABLE copying artifacts because it is the very first job in the pipeline.
    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import copy_artifacts with context %}
    {{ copy_artifacts(job_config, job_environ) }}
    #}

    <hudson.tasks.Shell>
      <command>

        {% from 'common/libs/host_config_queries.sls' import get_system_host_primary_user_posix_home with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import locate_dynamic_build_descriptor with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import update_dynamic_build_descriptor with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_header with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_footer with context %}

        #######################################################################
        # Script header

        {{ common_build_script_header(job_config, job_environ) }}

        #######################################################################
        # Locate dynamic build descriptor.

        # NOTE: We don't check existance of initital dyn build desc
        #       only for initial job in the entire pipeline.
        {{ locate_dynamic_build_descriptor(job_config, job_environ, check_init_dyn_build_desc = False) }}

        # This is the first job in the init_pipeline.
        # Clean contents of the initial and latest dyn build desc.
        echo > "${LATEST_DYN_BUILD_DESC_PATH}"
        echo > "${INIT_DYN_BUILD_DESC_PATH}"

        # Clean job dyn build desc as well. Unlike other jobs, this one
        # is the first in entire "global" pipeline and inherits no
        # info from the previous jobs.
        echo > "${JOB_DYN_BUILD_DESC_PATH}"

        # There must be no sign of produced artifact at the start.
        rm -f "initial.dynamic_build_descriptor.yaml"

        #######################################################################
        # Set build title.

        BUILD_TIMESTAMP="$(date "+%Y-%m-%dT%H-%M-%S")"
        SOURCE_PROFILE_NAME="${SALT_PROFILE_NAME}"
        export BUILD_TITLE="${BUILD_TIMESTAMP}-${BUILD_NUMBER}-${SOURCE_PROFILE_NAME}-SNAPSHOT-${BUILD_LABEL}"

        echo "$BUILD_TIMESTAMP" | python ${KEY_SETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_timestamp"
        echo "$BUILD_TITLE"     | python ${KEY_SETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_title"

        #######################################################################
        # Write environment variables into dynamic build descriptor.

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import store_environment_python_script with context %}

        # TODO: Filter sensitive environment variables.

        # In-place Python script. Write it into a file to be executed later.
        ENV_PYTHON_SCRIPT=$(mktemp)
cat &lt;&lt;HEREDOC_MARKER &gt; ${ENV_PYTHON_SCRIPT}
{{ store_environment_python_script(job_config, job_environ) }}
HEREDOC_MARKER

        # Write output of env command into dynamic build descriptor.
        env | python "${ENV_PYTHON_SCRIPT}" "${JOB_DYN_BUILD_DESC_PATH}"

        #######################################################################
        # Write parameters to the file used by subsequent jobs.

        # NOTE: The properties are pretty useless at the moment.
        #       All information is exchanged through dyn build desc.

        # Locate and create clean properties file.
        BUILD_PROPS_PATH='{{ job_environ['jenkins_dir_path'] }}/build_pipeline/build.properties'
        mkdir -p "$(dirname "$BUILD_PROPS_PATH")"
        echo > "$BUILD_PROPS_PATH"

        # Write each build parameter into the properties file.
        {% for param_name in job_config['build_parameters'].keys() %}
        echo "{{ param_name }}=${{ param_name }}" >> "$BUILD_PROPS_PATH"
        # Even though build parameters are part of environment variables,
        # save them into special section of dynamic build descriptor.
        echo "${{ param_name }}" | python ${KEY_SETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_parameters:{{ param_name }}"
        {% endfor %}

        # In addition to that, store BUILD_TITLE.
        echo "BUILD_TITLE=${BUILD_TITLE}" >> "$BUILD_PROPS_PATH"

        #######################################################################
        # Check that specified author is able to commit in every repository.

        {% for repo_name in pillar['system_features']['deploy_environment_sources']['source_repositories'].keys() %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][repo_name]['git'] %}
        REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        cd "${REPO_PATH}"
        TEMP_FILE_NAME="${SALT_PROFILE_NAME}-$(date "+%Y-%m-%dT%H-%M-%S.%N")"
        touch "${TEMP_FILE_NAME}"
        git add "${TEMP_FILE_NAME}"
        set +e
        git commit --dry-run --author="${GIT_AUTHOR_EMAIL}"
        RET_VAL="${?}"
        set -e
        git reset "${TEMP_FILE_NAME}"
        rm "${TEMP_FILE_NAME}"
        test "${RET_VAL}" == "0"
        cd -

        {% endfor %}

        #######################################################################
        # Update dynamic build descriptor.

        {{ update_dynamic_build_descriptor(job_config, job_environ) }}

        # Save initial dynamic build descriptor to save it for verification.
        cp "${JOB_DYN_BUILD_DESC_PATH}" "${INIT_DYN_BUILD_DESC_PATH}"

        # Present as initial dyn build desc as an artifact
        # build by this first job (for fingerprinting).
        cp "${INIT_DYN_BUILD_DESC_PATH}" "initial.dynamic_build_descriptor.yaml"

        #######################################################################
        # Script footer

        {{ common_build_script_footer(job_config, job_environ) }}

        #######################################################################

      </command>
    </hudson.tasks.Shell>
  </builders>

  <publishers>

    <!--
        Archive and Fingerprint initial dynamic build descriptor.
        This is only needed to trace jobs of the same pipeline execution.
    -->
    <hudson.tasks.ArtifactArchiver>
      <artifacts>initial.dynamic_build_descriptor.yaml</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>true</onlyIfSuccessful>
      <fingerprint>true</fingerprint>
      <defaultExcludes>true</defaultExcludes>
    </hudson.tasks.ArtifactArchiver>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import parameterized_job_triggers_macro with context %}
    {{ parameterized_job_triggers_macro(job_config, job_environ) }}

  </publishers>

  <buildWrappers/>

</project>

