<?xml version='1.0' encoding='UTF-8'?>
<maven2-moduleset plugin="maven-plugin@2.7.1">

  {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_job_configuration with context %}
  {{ common_job_configuration(job_config, job_environ) }}

  <!--
      Maven Project configuration.
  -->

  <!--
        Disable specification of `groupId` and `artifactId`.
        At the moment it seems like unnecessary details because `pom.xml`
        file contains them. And Jenkins works anyway.
        #{#
  -->
  <rootModule>
    {% set component_group_id = job_config['job_config_data']['component_group_id'] %}
    <groupId>{{ component_group_id }}</groupId>
    {% set component_artifact_id = job_config['job_config_data']['component_artifact_id'] %}
    <artifactId>{{ component_artifact_id }}</artifactId>
  </rootModule>
  <!--
        #}#
  -->

  {% from 'common/libs/host_config_queries.sls' import get_system_host_primary_user_posix_home with context %}
  {% set repo_name = job_config['job_config_data']['repository_name'] %}
  {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][repo_name]['git'] %}
  {% set repo_path = get_system_host_primary_user_posix_home(repo_config['source_system_host']) + '/' + repo_config['origin_uri_ssh_path'] %}
  {% set component_pom_path = job_config['job_config_data']['component_pom_path'] %}
  <rootPOM>{{ repo_path }}/{{ component_pom_path }}</rootPOM>

  {% set extra_goals = '' %}

  {% if 'sonarqube_runner' in job_config and job_config['sonarqube_runner'] %}
  <!--
    NOTE: We set `sonar.branch` property to repo's unique name
          to allow each repository be analyzed individually by SonarQube.
          If `sonar.branch` is not set (all repos are analyzed with
          empty string "" branch nmae), then SonarQube rejects reports
          if specific Maven component is arleady sub-component (or sup-) of
          existing porject tracked by SonarQube. In other words,
          if top-level Maven project is already analyzed by SonarQube,
          all sub-projects are symply ignored.
          Property `sonar.branch` allows treating all of them as separate.
  -->
  {% set extra_goals = extra_goals + ' sonar:sonar' + ' -Dsonar.branch=' + repo_name %}
  {% endif %}

  <!--
    NOTE: Regardless of specified goals, use `help:system` which is
          the only known way to show exaclty those environment variables
          used for Jenkins Maven plugin.
  -->
  {% if 'maven_args' in job_config %}
  <goals>help:system {{ job_config['maven_args']|e }} {{ extra_goals }}</goals>
  {% else %}
  <goals>help:system clean install {{ extra_goals }}</goals>
  {% endif %}

  <aggregatorStyleBuild>true</aggregatorStyleBuild>
  <incrementalBuild>false</incrementalBuild>
  <ignoreUpstremChanges>false</ignoreUpstremChanges>

  {% if 'MAVEN_OPTS' in job_config %}
  <mavenOpts>{{ job_config['MAVEN_OPTS']|e }}</mavenOpts>
  {% endif %}

  {% if 'disable_archiving' in job_config %}
  <archivingDisabled>true</archivingDisabled>
  <siteArchivingDisabled>true</siteArchivingDisabled>
  <fingerprintingDisabled>true</fingerprintingDisabled>
  {% else %}
  <archivingDisabled>false</archivingDisabled>
  <siteArchivingDisabled>false</siteArchivingDisabled>
  <fingerprintingDisabled>false</fingerprintingDisabled>
  {% endif %}

  <resolveDependencies>false</resolveDependencies>
  <processPlugins>false</processPlugins>
  <mavenValidationLevel>-1</mavenValidationLevel>
  <runHeadless>false</runHeadless>
  <disableTriggerDownstreamProjects>false</disableTriggerDownstreamProjects>
  <blockTriggerWhenBuilding>true</blockTriggerWhenBuilding>
  <settings class="jenkins.mvn.DefaultSettingsProvider"/>
  <globalSettings class="jenkins.mvn.DefaultGlobalSettingsProvider"/>

  <reporters/>

  <publishers>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import parameterized_job_triggers_macro with context %}
    {{ parameterized_job_triggers_macro(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import send_email_notifications with context %}
    {{ send_email_notifications(job_config, job_environ) }}

  </publishers>


  <buildWrappers>

    <!--
         Maven Release configuration.
    -->
    <org.jvnet.hudson.plugins.m2release.M2ReleaseBuildWrapper plugin="m2release@0.14.0">
      <scmUserEnvVar></scmUserEnvVar>
      <scmPasswordEnvVar></scmPasswordEnvVar>
      <releaseEnvVar>IS_M2RELEASEBUILD</releaseEnvVar>
      <releaseGoals>-Dresume=false release:prepare release:perform</releaseGoals>
      <dryRunGoals>-Dresume=false -DdryRun=true release:prepare</dryRunGoals>
      <selectCustomScmCommentPrefix>false</selectCustomScmCommentPrefix>
      <selectAppendHudsonUsername>false</selectAppendHudsonUsername>
      <selectScmCredentials>false</selectScmCredentials>
      <numberOfReleaseBuildsToKeep>1</numberOfReleaseBuildsToKeep>
    </org.jvnet.hudson.plugins.m2release.M2ReleaseBuildWrapper>

    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.7.2"/>

  </buildWrappers>

  <prebuilders>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import copy_artifacts with context %}
    {{ copy_artifacts(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import add_job_environment_variables with context %}
    {{ add_job_environment_variables(job_config, job_environ) }}

    <!--
        NOTE: Print job environment variables and java version
              before Maven bulid (ensure required precondition).
    -->
    <hudson.tasks.Shell>
      <command>

        # TODO: Deduplicate.
        #       This pre-build script duplicates post-build script.

        set -v
        set -x
        set -u
        set -e

        # DEBUG: Display environment variables and java version before build.
        env
        java -version

        # Make sure there is no untracked files.
        # NOTE: All files generated during the build should be
        #       ignored via .gitignore.
        cd {{ repo_path }}
        # NOTE: Without `add -all` `diff-index` will not notice untracked files.
        git add --all
        set +e
        git diff-index --ignore-submodules=all --exit-code HEAD
        RET_VAL="${?}"
        set -e
        git reset
        test "${RET_VAL}" == "0"
        cd -

      </command>
    </hudson.tasks.Shell>

  </prebuilders>

  <postbuilders>

    <!--
        NOTE: Print job environment variables and java version
              after Maven bulid (ensure no changes during job run).
    -->
    <hudson.tasks.Shell>
      <command>

        # TODO: Deduplicate.
        #       This pre-build script duplicates post-build script.

        set -v
        set -x
        set -u
        set -e

        # DEBUG: Display environment variables and java version before build.
        env
        java -version

        # Make sure there is no untracked files.
        # NOTE: All files generated during the build should be
        #       ignored via .gitignore.
        cd {{ repo_path }}
        # NOTE: Without `add -all` `diff-index` will not notice untracked files.
        git add --all
        set +e
        git diff-index --ignore-submodules=all --exit-code HEAD
        RET_VAL="${?}"
        set -e
        git reset
        test "${RET_VAL}" == "0"
        cd -

      </command>
    </hudson.tasks.Shell>

    <!--
        The following script pools for SonarQube analyzis result
        and fails build if quality gate has not been passed.
        See how in SonarQube documentation:
            http://docs.sonarqube.org/display/SONAR/Breaking+the+CI+Build
    -->
    {% if 'sonarqube_runner' in job_config and job_config['sonarqube_runner'] %}
    <hudson.tasks.Shell>
      <command>

        set -v
        set -x
        set -u
        set -e

        # DEBUG: Display environment variables and java version before build.
        env
        java -version

        cd {{ repo_path }}

        # Make sure report data is generated by Maven plugin.
        SONAR_REPORT_PATH="$(dirname "{{ component_pom_path }}")/target/sonar/report-task.txt"
        ls -l "${SONAR_REPORT_PATH}"

        # Load report data into shell-script variables.
        # The file has syntax which matches that of shell-script
        # variable assignments.
        . "${SONAR_REPORT_PATH}"

        # Print variables necessary for API calls.
        echo "serverUrl=${serverUrl}"
        echo "ceTaskId=${ceTaskId}"
        echo "ceTaskUrl=${ceTaskUrl}"

        # Loop until success changes to SUCCESS, CANCELED, FAILED.
        REPEAT_COUNTER="0"
        while true
        do

            # grep '"status":"SUCCESS"\|"status":"CANCELED"\|"status":"FAILED"'

            # Get `status` in JSON object returned by GET to `ceTaskUrl`.
            TASK_STATUS_VAL="$(unset http_proxy; unset https_proxy; \
            curl -H "Accept: application/json" -H "Content-Type: application/json" "${ceTaskUrl}" |\
            python -c 'import sys; import json; obj=json.load(sys.stdin); print obj["task"]["status"]')"

            if [ "${TASK_STATUS_VAL}" == "SUCCESS" ]
            then

                # Get `analysisId`.
                ANALYSIS_ID="$(unset http_proxy; unset https_proxy; \
                curl -H "Accept: application/json" -H "Content-Type: application/json" "${ceTaskUrl}" |\
                python -c 'import sys; import json; obj=json.load(sys.stdin); print obj["task"]["analysisId"]')"

                # Use `analysisId` to check quality gate result.
                ANALYSIS_STATUS_VAL="$(unset http_proxy; unset https_proxy; \
                curl -H "Accept: application/json" -H "Content-Type: application/json" "${serverUrl}/api/qualitygates/project_status?analysisId=${ANALYSIS_ID}" |\
                python -c 'import sys; import json; obj=json.load(sys.stdin); print obj["projectStatus"]["status"]')"

                if [ "${ANALYSIS_STATUS_VAL}" == "OK" ]
                then

                    # Success - exit the script.
                    exit 0

                elif [ "${ANALYSIS_STATUS_VAL}" == "WARN" ]
                then

                    # TODO: OBS-2073: Set Jenkins job to unstable.
                    # At the moment WARN is indistinguishable from OK.
                    exit 0

                elif [ "${ANALYSIS_STATUS_VAL}" == "ERROR" ]
                then

                    # Obviously, fail.
                    false

                else

                    # Fail - unexpected/unknown result.
                    false

                fi

            elif [ "${TASK_STATUS_VAL}" == "CANCELED" ]
            then

                # Simply fail if analysis was canceled.
                false

            elif [ "${TASK_STATUS_VAL}" == "FAILED" ]
            then

                # Obviously, fail.
                false

            else

                # Nothing to do.
                echo "TASK_STATUS_VAL=${TASK_STATUS_VAL}"

            fi

            # Do not loop forever.
            REPEAT_COUNTER="$((${REPEAT_COUNTER} + 1))"
            if [ "${REPEAT_COUNTER}" -gt "100" ]
            then
                exit 0
            fi

            sleep 1

        done

        cd -

      </command>
    </hudson.tasks.Shell>
    {% endif %}

  </postbuilders>

  <runPostStepsIfResult>
    <name>FAILURE</name>
    <ordinal>2</ordinal>
    <color>RED</color>
    <completeBuild>true</completeBuild>
  </runPostStepsIfResult>

</maven2-moduleset>

