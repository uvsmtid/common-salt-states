<?xml version='1.0' encoding='UTF-8'?>
<project>

  {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_job_configuration with context %}
  {{ common_job_configuration(job_config, job_environ) }}

  <builders>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import copy_artifacts with context %}
    {{ copy_artifacts(job_config, job_environ) }}

    <hudson.tasks.Shell>
      <command>

        {% from 'common/libs/host_config_queries.sls' import get_system_host_primary_user_posix_home with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import locate_dynamic_build_descriptor with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import update_dynamic_build_descriptor with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_header with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_footer with context %}

        #######################################################################
        # Script header

        {{ common_build_script_header(job_config, job_environ) }}

        #######################################################################
        # Locate dynamic build descriptor.

        {{ locate_dynamic_build_descriptor(job_config, job_environ) }}

        #######################################################################
        # Function to update resource definition.

        # Make sure dynamic build descriptor repository file exists.
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import locate_repository_dynamic_build_descriptor with context %}
        {{ locate_repository_dynamic_build_descriptor(job_config, job_environ) }}
        ls -lrt "${REPO_DYN_BUILD_DESC_PATH}"

        function update_resource_with_its_definition {
            ARTIFACT_SRC_PATH="${1}"
            DST_REPO_PATH="${2}"
            DST_SUBDIR_PATH="${3}"
            RESOURCE_ID="${4}"

            ARTIFACT_BASENAME="$(basename "${ARTIFACT_SRC_PATH}")"

            # Make sure destination directory exits.
            mkdir -p "${DST_REPO_PATH}/${DST_SUBDIR_PATH}"

            ARTIFACT_DST_PATH="${DST_REPO_PATH}/${DST_SUBDIR_PATH}/${ARTIFACT_BASENAME}"

            cp "${ARTIFACT_SRC_PATH}" "${ARTIFACT_DST_PATH}"

            ARTIFACT_MD5_HASH="$(md5sum "${ARTIFACT_SRC_PATH}" | cut -f1 -d' ')"
            # Double make sure that hashes of SRC and DST match:
            md5sum "${ARTIFACT_DST_PATH}" | grep "${ARTIFACT_MD5_HASH}"

            echo "${DST_SUBDIR_PATH}"       | python ${KEY_SETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "${RESOURCE_ID}:item_parent_dir_path"
            echo "${ARTIFACT_BASENAME}"     | python ${KEY_SETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "${RESOURCE_ID}:item_base_name"
            echo "md5=${ARTIFACT_MD5_HASH}" | python ${KEY_SETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "${RESOURCE_ID}:item_content_hash"
        }

        #######################################################################
        # Update artifacts in resources repos
        # and record resource definition info into dynamic build descriptor.

        # TODO: Update (overwrite default via dynamic build descriptor)
        #       resources in registered content and commit them (if required)
        #       so that bootstrap package can use the newly built artifacts.
        # NOTE: Normally this is done in project-specific jobs (not common).

        #######################################################################
        # Save dynamic build descriptor to repository before committing it.

        cp "${JOB_DYN_BUILD_DESC_PATH}" "${REPO_DYN_BUILD_DESC_PATH}"

        #######################################################################
        # Commit all changes made to repositories.
        #
        # TODO: This script is very similar with creating restore point
        #       in `create_build_branches` and may be factored out for reuse.
        #
        # Sequence:
        # - Save all other repos (children).
        # - Save parent repo first
        #   (as commits in childs will change what parent should contain).

        {% if pillar['parent_repo_name'] %}
        # Parent repo is defined and it is the first.
        # TODO: This `repo_list` makes this parent repo committed twice.
        #       Try to leave only its last occurrence in the list.
        {% set repo_list = pillar['system_features']['deploy_environment_sources']['source_repositories'].keys() + [ pillar['parent_repo_name'] ] %}
        {% else %}
        # This profile does not define parent repo.
        {% set repo_list = pillar['system_features']['deploy_environment_sources']['source_repositories'].keys() %}
        {% endif %}

        {% for repo_name in repo_list %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][repo_name]['git'] %}
        REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        cd "${REPO_PATH}"

        CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
        # HEAD value means that repository is at detached head.
        test "${CURRENT_BRANCH}" != "HEAD"

        BUILD_BRANCH="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_branches:{{ repo_name }}")"
        test "${CURRENT_BRANCH}" == "${BUILD_BRANCH}"

        # NOTE: Without `add -all` `diff-index` will not notice untracked files.
        git add --all
        git status
        # Commit only if there are changes.
        # Ignore dirty content in submodules because there is no way to
        # commit them from top-level repo anyway (and all dirty content
        # will be committed by children).
        git diff-index --ignore-submodules=dirty --exit-code HEAD || git commit --author "${GIT_AUTHOR_EMAIL}" -m 'Auto-commit: {{ job_environ['job_name'] }}'

        # Record `latest_commit_ids`.
        CURRENT_COMMIT_ID="$(git rev-parse --verify HEAD)"
        echo "${CURRENT_COMMIT_ID}" | python "${KEY_SETTER_PYTHON_SCRIPT}" "${JOB_DYN_BUILD_DESC_PATH}" "latest_commit_ids:{{ repo_name }}"

        cd -

        {% endfor %}

        #######################################################################
        # Update dynamic build descriptor.

        {{ update_dynamic_build_descriptor(job_config, job_environ) }}

        #######################################################################
        # Script footer

        {{ common_build_script_footer(job_config, job_environ) }}

        #######################################################################

      </command>
    </hudson.tasks.Shell>
  </builders>

  <publishers>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import parameterized_job_triggers_macro with context %}
    {{ parameterized_job_triggers_macro(job_config, job_environ) }}

  </publishers>

  <buildWrappers/>

</project>

