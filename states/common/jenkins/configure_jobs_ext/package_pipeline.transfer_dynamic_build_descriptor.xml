<?xml version='1.0' encoding='UTF-8'?>
<project>

  {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_job_configuration with context %}
  {{ common_job_configuration(job_config, job_environ) }}

  <builders>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import copy_artifacts with context %}
    {{ copy_artifacts(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import add_job_environment_variables with context %}
    {{ add_job_environment_variables(job_config, job_environ) }}

    <hudson.tasks.Shell>
      <command>

        {% from 'common/libs/host_config_queries.sls' import get_system_host_primary_user_posix_home with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import locate_dynamic_build_descriptor with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import update_dynamic_build_descriptor with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_header with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_footer with context %}

        #######################################################################
        # Script header

        {{ common_build_script_header(job_config, job_environ) }}

        #######################################################################
        # Locate dynamic build descriptor.

        {{ locate_dynamic_build_descriptor(job_config, job_environ) }}

        #######################################################################
        # Load additional macros.

        {% from 'common/libs/repo_config_queries.lib.sls' import get_repository_id_by_role with context %}

        #######################################################################
        # Get necessary info.

        # Get location of pillars (source profile) repo.
        {% set source_profile_repo_id = pillar['project_name'] + '-salt-pillars' %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][source_profile_repo_id]['git'] %}
        export SOURCE_PROFILE_REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        # Get location of target bootstrap profile pillars repo.
        {% set target_profile_repo_id = get_repository_id_by_role('target_profile_pillars_role') %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][target_profile_repo_id]['git'] %}
        export TARGET_PROFILE_REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        #######################################################################
        # Make sure target bootstrap profile pillars repo is on required branch.

        cd "${TARGET_PROFILE_REPO_PATH}"

        CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
        BUILD_BRANCH="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_branches:{{ target_profile_repo_id }}")"
        test "${CURRENT_BRANCH}" == "${BUILD_BRANCH}"

        cd -

        #######################################################################
        # PART 1: Special case when `TARGET_PROFILE_NAME` is undefined.
        # This case defines both `deploy_pipeline` and `release_pipeline`.
        # FORWARD: Update (fast-forward merge)
        #          target pillars repo from
        #          source pillars repo.

        cd "${SOURCE_PROFILE_REPO_PATH}"

        CURRENT_SOURCE_PILLAR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
        BUILD_BRANCH="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_branches:{{ source_profile_repo_id }}")"
        test "${CURRENT_SOURCE_PILLAR_BRANCH}" == "${BUILD_BRANCH}"

        cd -

        # NOTE: `TARGET_PROFILE_NAME` is only defined for `package_pipeline`.
        #       For all other cases (when `TARGET_PROFILE_NAME` is undefined)
        #       it should match (source) `SALT_PROFILE_NAME`.
        cd "${TARGET_PROFILE_REPO_PATH}"
        if [ -z "${TARGET_PROFILE_NAME:-}" ]
        then

            CURRENT_TARGET_PILLAR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
            BUILD_BRANCH="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_branches:{{ target_profile_repo_id }}")"
            test "${CURRENT_TARGET_PILLAR_BRANCH}" == "${BUILD_BRANCH}"

            # Update target profile pillars repo from source profile pillars repo.
            git pull --ff-only "${SOURCE_PROFILE_REPO_PATH}" "${CURRENT_SOURCE_PILLAR_BRANCH}"

        fi
        cd -

        #######################################################################
        # This job has several dynamic build descriptor transfer modes:
        # - `deploy_pipeline` or `package_pipeline`
        #       In this case the transfer is done to target pillar repository.
        #       This is to be able to build bootstrap package.
        #       NOTE: The `deploy_pipeline` deploys everything into
        #             source environment and needs transfer of dynamic
        #             build descriptor into source pillar repository.
        #             This is done in below by pulling changes from
        #             the target pillar into source pillar repository.
        # - `release_pipeline`
        #       In this case the transfer is done to project states repository
        #       (to provide released dynamic build descriptor).
        # To tell the difference between the two modes,
        # `RELEASE_TYPE` build parameter.

        # Get location of build history repo.
        {% set build_history_repo_id = get_repository_id_by_role('build_history_role') %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][build_history_repo_id]['git'] %}
        export BUILD_HISTORY_REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        # Get location of project states repo.
        {% set project_states_repo_id = get_repository_id_by_role('project_states_role') %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][project_states_repo_id]['git'] %}
        export PROJECT_STATES_REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        cd "${BUILD_HISTORY_REPO_PATH}"

        CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
        BUILD_BRANCH="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_branches:{{ build_history_repo_id }}")"
        test "${CURRENT_BRANCH}" == "${BUILD_BRANCH}"

        if [ -n "${RELEASE_TYPE:-}" ]
        then
            export TRANSFER_DESTINATION_REPO_PATH="${PROJECT_STATES_REPO_PATH}"
        else
            export TRANSFER_DESTINATION_REPO_PATH="${TARGET_PROFILE_REPO_PATH}"
        fi

        # Transfer dynamic build descriptor.
        cp "${BUILD_TITLE}/dynamic_build_descriptor.yaml" "${TRANSFER_DESTINATION_REPO_PATH}/pillars/profile/dynamic_build_descriptor.yaml"

        cd -

        cd "${TRANSFER_DESTINATION_REPO_PATH}"

        # Make sure repository became dirty, otherwise fail.
        # NOTE: The only known reason why repository is not dirty can be
        #       if this dyn build desc was already transfered before.
        #       However, any new pipeline which uses this job template
        #       leaves changes in the build descriptor making clean
        #       repository state impossible.
        if ! git diff-index --ignore-submodules=dirty --exit-code HEAD
        then
            if [ "${JOB_STATUS}" -lt '2' ]
            then
                JOB_STATUS='2'
            fi
        fi

        # NOTE: Without `add --all` `diff-index` will not notice untracked files.
        git add --all

        # Display status.
        git status

        # Commit only if there are changes.
        # Ignore dirty content in submodules because there is no way to
        # commit them from top-level repo anyway (and all dirty content
        # will be committed by children).
        git diff-index --ignore-submodules=dirty --exit-code HEAD || git commit --author "${AUTO_COMMIT_GIT_AUTHOR_EMAIL}" -m 'Auto-commit: provide dynamic build descriptor'

        # Record `latest_commit_ids`.
        CURRENT_COMMIT_ID="$(git rev-parse --verify HEAD)"
        if [ -n "${RELEASE_TYPE:-}" ]
        then
            echo "${CURRENT_COMMIT_ID}" | python "${KEY_SETTER_PYTHON_SCRIPT}" "${JOB_DYN_BUILD_DESC_PATH}" "latest_commit_ids:{{ project_states_repo_id }}"
        else
            echo "${CURRENT_COMMIT_ID}" | python "${KEY_SETTER_PYTHON_SCRIPT}" "${JOB_DYN_BUILD_DESC_PATH}" "latest_commit_ids:{{ target_profile_repo_id }}"
        fi

        cd -

        #######################################################################
        # PART 2: Special case when `TARGET_PROFILE_NAME` is undefined
        #         AND transfer was done to target pillars (not states repo).
        # This case defines ONLY `deploy_pipeline`.
        # BACKWARD: Update (fast-forward merge)
        #           source pillars repo from
        #           target pillars repo.

        if [ "${TRANSFER_DESTINATION_REPO_PATH}" == "${TARGET_PROFILE_REPO_PATH}" ]
        then

        cd "${TARGET_PROFILE_REPO_PATH}"

        CURRENT_TARGET_PILLAR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
        BUILD_BRANCH="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_branches:{{ target_profile_repo_id }}")"
        test "${CURRENT_TARGET_PILLAR_BRANCH}" == "${BUILD_BRANCH}"

        cd -

        # NOTE: `TARGET_PROFILE_NAME` is only defined for `package_pipeline`.
        #       For all other cases (when `TARGET_PROFILE_NAME` is undefined)
        #       it should match (source) `SALT_PROFILE_NAME`.
        cd "${SOURCE_PROFILE_REPO_PATH}"
        if [ -z "${TARGET_PROFILE_NAME:-}" ]
        then

            CURRENT_SOURCE_PILLAR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
            BUILD_BRANCH="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_branches:{{ source_profile_repo_id }}")"
            test "${CURRENT_SOURCE_PILLAR_BRANCH}" == "${BUILD_BRANCH}"

            # Update target profile pillars repo from source profile pillars repo.
            git pull --ff-only "${TARGET_PROFILE_REPO_PATH}" "${CURRENT_SOURCE_PILLAR_BRANCH}"

        fi
        cd -

        fi

        #######################################################################
        # Update dynamic build descriptor.

        {{ update_dynamic_build_descriptor(job_config, job_environ) }}

        #######################################################################
        # Script footer

        {{ common_build_script_footer(job_config, job_environ) }}

        #######################################################################

      </command>
    </hudson.tasks.Shell>
  </builders>

  <publishers>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import archive_artifacts with context %}
    {{ archive_artifacts(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import parameterized_job_triggers_macro with context %}
    {{ parameterized_job_triggers_macro(job_config, job_environ) }}

  </publishers>

  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.7.2"/>
  </buildWrappers>

</project>

