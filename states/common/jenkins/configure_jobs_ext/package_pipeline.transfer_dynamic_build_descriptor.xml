<?xml version='1.0' encoding='UTF-8'?>
<project>

  {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_job_configuration with context %}
  {{ common_job_configuration(job_config, job_environ) }}

  <builders>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import copy_artifacts with context %}
    {{ copy_artifacts(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import add_job_environment_variables with context %}
    {{ add_job_environment_variables(job_config, job_environ) }}

    <hudson.tasks.Shell>
      <command>

        {% from 'common/libs/host_config_queries.sls' import get_system_host_primary_user_posix_home with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import locate_dynamic_build_descriptor with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import update_dynamic_build_descriptor with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_header with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_footer with context %}

        #######################################################################
        # Script header

        {{ common_build_script_header(job_config, job_environ) }}

        #######################################################################
        # Locate dynamic build descriptor.

        {{ locate_dynamic_build_descriptor(job_config, job_environ) }}

        #######################################################################
        # Load additional macros.

        {% from 'common/libs/repo_config_queries.lib.sls' import get_repository_id_by_role with context %}

        #######################################################################
        # Make sure target bootstrap profile pillars repo is on required branch.

        # Get location of target bootstrap profile pillars repo.
        {% set target_profile_repo_id = get_repository_id_by_role('target_profile_pillars_role') %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][target_profile_repo_id]['git'] %}
        export TARGET_PROFILE_REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        cd "${TARGET_PROFILE_REPO_PATH}"

        CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
        BUILD_BRANCH="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_branches:{{ target_profile_repo_id }}")"
        test "${CURRENT_BRANCH}" == "${BUILD_BRANCH}"

        cd -

        #######################################################################
        # Special case when `TARGET_PROFILE_NAME` is undefined.
        # Update (fast-forward merge) target pillars repo from
        # source pillars repo.

        # Get location of effective pillars (source profile) repo.
        {% set source_profile_repo_id = get_repository_id_by_role('effective_pillars_role') %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][source_profile_repo_id]['git'] %}
        export SOURCE_PROFILE_REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        cd "${SOURCE_PROFILE_REPO_PATH}"

        CURRENT_SOURCE_PILLAR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
        BUILD_BRANCH="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_branches:{{ source_profile_repo_id }}")"
        test "${CURRENT_SOURCE_PILLAR_BRANCH}" == "${BUILD_BRANCH}"

        cd -

        # NOTE: `TARGET_PROFILE_NAME` is only defined for `package_pipeline`.
        #       For all other cases (when `TARGET_PROFILE_NAME` is undefined)
        #       it should match (source) `SALT_PROFILE_NAME`.
        cd "${TARGET_PROFILE_REPO_PATH}"
        if [ -z "${TARGET_PROFILE_NAME:-}" ]
        then

            CURRENT_TARGET_PILLAR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
            BUILD_BRANCH="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_branches:{{ target_profile_repo_id }}")"
            test "${CURRENT_TARGET_PILLAR_BRANCH}" == "${BUILD_BRANCH}"

            # Update target profile pillars repo from source profile pillars repo.
            git pull --ff-only "${SOURCE_PROFILE_REPO_PATH}" "${CURRENT_SOURCE_PILLAR_BRANCH}"

        fi
        cd -

        #######################################################################
        # Before building bootstrap package this job needs to transfer
        # (with any necessary updates) dynamic build descriptor from
        # build history into target pillars repository.

        # Get location of build history repo.
        {% set build_history_repo_id = get_repository_id_by_role('build_history_role') %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][build_history_repo_id]['git'] %}
        export BUILD_HISTORY_REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        cd "${BUILD_HISTORY_REPO_PATH}"

        CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
        BUILD_BRANCH="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_branches:{{ build_history_repo_id }}")"
        test "${CURRENT_BRANCH}" == "${BUILD_BRANCH}"

        cp "${BUILD_TITLE}/dynamic_build_descriptor.yaml" "${TARGET_PROFILE_REPO_PATH}/pillars/profile/dynamic_build_descriptor.yaml"

        cd -

        cd "${TARGET_PROFILE_REPO_PATH}"

        # Make sure repository became dirty, otherwise fail.
        if git diff-index --ignore-submodules=dirty --exit-code HEAD
        then
            if [ "${JOB_STATUS}" -lt '2' ]
            then
                JOB_STATUS='2'
            fi
        fi

        # NOTE: Without `add --all` `diff-index` will not notice untracked files.
        git add --all

        # Display status.
        git status

        # Commit only if there are changes.
        # Ignore dirty content in submodules because there is no way to
        # commit them from top-level repo anyway (and all dirty content
        # will be committed by children).
        git diff-index --ignore-submodules=dirty --exit-code HEAD || git commit --author "${AUTO_COMMIT_GIT_AUTHOR_EMAIL}" -m 'Auto-commit: provide dynamic build descriptor'

        # Record `latest_commit_ids`.
        CURRENT_COMMIT_ID="$(git rev-parse --verify HEAD)"
        echo "${CURRENT_COMMIT_ID}" | python "${KEY_SETTER_PYTHON_SCRIPT}" "${JOB_DYN_BUILD_DESC_PATH}" "latest_commit_ids:{{ target_profile_repo_id }}"

        cd -

        #######################################################################
        # Update dynamic build descriptor.

        {{ update_dynamic_build_descriptor(job_config, job_environ) }}

        #######################################################################
        # Script footer

        {{ common_build_script_footer(job_config, job_environ) }}

        #######################################################################

      </command>
    </hudson.tasks.Shell>
  </builders>

  <publishers>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import archive_artifacts with context %}
    {{ archive_artifacts(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import parameterized_job_triggers_macro with context %}
    {{ parameterized_job_triggers_macro(job_config, job_environ) }}

  </publishers>

  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.7.2"/>
  </buildWrappers>

</project>

