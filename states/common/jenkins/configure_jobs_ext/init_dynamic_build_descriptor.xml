<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>{{ job_description }}</description>
  <keepDependencies>false</keepDependencies>

  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>BUILD_TYPE</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>SNAPSHOT</string>
              <string>INCREMENTAL_RELEASE</string>
              <string>SEMANTIC_RELEASE</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>

  {#
    Examples of other parameters.
  #}
  {% if False %}
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>BOOLEAN</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>CHOICE</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>A</string>
              <string>B</string>
              <string>C</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.FileParameterDefinition>
          <name>FILE_PARAMETER</name>
          <description></description>
        </hudson.model.FileParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>PASSWORD_PARAMETER</name>
          <description></description>
          <defaultValue>Y/ZTS27PlsnmKDKqz2Cn1g==</defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>STRING_PARAMETER</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>TEXT_PARAMETER</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.TextParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>

  {% endif %}

  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>{{ job_assigned_host }}</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>

    {% if 'timer_spec' in job_config %}
    {% if job_config['timer_spec'] %}
    <hudson.triggers.TimerTrigger>
      <spec>{{ job_config['timer_spec'] }}</spec>
    </hudson.triggers.TimerTrigger>
    {% endif %}
    {% endif %}

  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>

        set -e
        set -u

        {% if 'skip_script_execution' in job_config and job_config['skip_script_execution'] %}
        exit 0
        {% endif %}

        {% from 'common/libs/host_config_queries.sls' import get_system_host_primary_user_posix_home with context %}

        # Get location of dynamic build descriptor (which is in pillar).
        # TODO: The repo name with pillars is just an assumption:
        #       {# project_name #}-salt-pillars
        {% set project_name = pillar['project_name'] %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][project_name + '-salt-pillars']['git'] %}
        DYN_BUILD_DESC_PATH='{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}/pillars/profile/dynamic_build_descriptor.yaml'
        # Make sure file exists.
        ls -lrt ${DYN_BUILD_DESC_PATH}

        # Print environment variables.
        env
        # Write environment variables into dynamic build descriptor.
        PYTHON_SCRIPT=$(mktemp)
        cat &lt;&lt;HEREDOC_MARKER &gt; ${PYTHON_SCRIPT}
import os
import sys
import yaml

# Load data from dynamic descriptor.
with open(sys.argv[1], 'r') as yaml_file:
    loaded_data = yaml.load(yaml_file)

if loaded_data is None:
    loaded_data = {}

# Save environment variables as text with shell code.
loaded_data['environ_text'] = sys.stdin.read()
# Save environment variables as dict structure.
loaded_data['environ'] = os.environ.copy()

with open(sys.argv[1], 'w') as yaml_file:
    yaml.dump(
        loaded_data,
        yaml_file,
        default_flow_style = False,
        indent = 4,
    )

HEREDOC_MARKER
        env | python ${PYTHON_SCRIPT} ${DYN_BUILD_DESC_PATH}

        {% if False %}

        {% from 'common/libs/host_config_queries.sls' import get_system_host_primary_user_posix_home with context %}

        # NOTE: We assume that repository is available
        #       locally on Jenkins slave.

        # We assume that remote `origin` has to be pre-configured.
        # TODO: Use automation to use configured remote and probably branch.

        {% for repo_name in pillar['system_features']['deploy_environment_sources']['source_repositories'].keys() %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][repo_name]['git'] %}
        cd {{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}
        CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
        # HEAD value means that repository is at detached head.
        test "$CURRENT_BRANCH" != "HEAD"
        git pull --ff-only origin $CURRENT_BRANCH
        {% endfor %}

        {% endif %}

      </command>
    </hudson.tasks.Shell>
  </builders>

  <publishers>

    {% if 'trigger_jobs' in job_config and job_config['trigger_jobs'] %}
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.26">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.FileBuildParameters>
              <propertiesFile>{{ jenkins_dir_path }}/build.properties</propertiesFile>
              <failTriggerOnMissing>false</failTriggerOnMissing>
              <useMatrixChild>false</useMatrixChild>
              <onlyExactRuns>false</onlyExactRuns>
            </hudson.plugins.parameterizedtrigger.FileBuildParameters>
          </configs>
          <projects>{{ job_config['trigger_jobs']|join(',') }}</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>true</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
    {% endif %}

  </publishers>
  <buildWrappers/>
</project>
