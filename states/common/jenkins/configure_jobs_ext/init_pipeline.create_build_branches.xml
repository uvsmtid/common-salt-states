<?xml version='1.0' encoding='UTF-8'?>
<project>

  {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_job_configuration with context %}
  {{ common_job_configuration(job_config, job_environ) }}

  {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import job_multiple_scm_configuration with context %}
  {{ job_multiple_scm_configuration(job_config, job_environ) }}

  <builders>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import copy_artifacts with context %}
    {{ copy_artifacts(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import add_job_environment_variables with context %}
    {{ add_job_environment_variables(job_config, job_environ) }}

    <hudson.tasks.Shell>
      <command>

        {% from 'common/libs/host_config_queries.sls' import get_system_host_primary_user_posix_home with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import locate_dynamic_build_descriptor with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import update_dynamic_build_descriptor with context %}

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_header with context %}
        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import common_build_script_footer with context %}

        #######################################################################
        # Script header

        {{ common_build_script_header(job_config, job_environ) }}

        #######################################################################
        # Locate dynamic build descriptor.

        {{ locate_dynamic_build_descriptor(job_config, job_environ) }}

        # At this point (before checking out build branches), we already
        # know that recovery would require at least checking out recovery
        # branches back. The recovery and build branches are already written
        # in the dyn build desc - use it as initial recovery descriptor.
        cp "${LATEST_DYN_BUILD_DESC_PATH}" "${RECOVERY_DYN_BUILD_DESC_PATH}"

        #######################################################################
        # Locate dynamic build descriptor in build history repo.

        {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import locate_repository_dynamic_build_descriptor with context %}
        {{ locate_repository_dynamic_build_descriptor(job_config, job_environ) }}
        ls -lrt "${REPO_DYN_BUILD_DESC_PATH}"

        #######################################################################
        # Import additional marco.

        {% from 'common/libs/repo_config_queries.lib.sls' import get_repository_id_by_role with context %}

        #######################################################################
        # Create restore point - commits of all local modifications.
        #
        # This restore point will be used to recover all local modifications
        # after switching back to recovery branches even if build branches
        # are supposed to be deleted.
        #
        # TODO: This script section is very similar (or the same) with what
        #       has to be done when any changes need to be checked in during
        #       the build pipeline. Factor out for reuse.
        #
        # Sequence:
        # - Save parent repo first
        #   (as commits in childs will not make original restore point).
        # - Save all other repos (children).

        # TODO: Use repository roles instead of `parent_repo_name`.
        # TODO: Create macros to provide commit order everything then parent.
        #       IMPORTANT:
        #       *   If we don't create restore points for parent
        #           before children, then the restore point for
        #           parent will contain changes in children commit ids.
        #           Then resore point is not exactly as parent was before build.
        #       *   If we list parent before full list of other repositories,
        #           then parent will be listed twice. In this case,
        #           one restore point will override another.
        #           This is worse - parent won't be restored.
        #       Out of two cases, we allow the first one to avoid the second.
        {% if pillar['parent_repo_name'] %}
        {% set repo_list = pillar['system_features']['deploy_environment_sources']['source_repositories'].keys() %}
        {% if False %} # DISABLED: See comment above.
        # Parent repo is defined and it is the first.
        {% set repo_list = [ pillar['parent_repo_name'] ] + pillar['system_features']['deploy_environment_sources']['source_repositories'].keys() %}
        {% endif %}
        {% else %}
        # This profile does not define parent repo.
        {% set repo_list = pillar['system_features']['deploy_environment_sources']['source_repositories'].keys() %}
        {% endif %}

        {% for repo_name in repo_list %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][repo_name]['git'] %}

        {% if repo_name in pillar['system_features']['deploy_environment_sources']['repository_roles']['build_history_role'] %}

        # NOTE: Do not create restore point in `build_history_role`.
        #       There must be no local modifications on start of the pipeline.

        {% else %}

        REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        cd "${REPO_PATH}"

        CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
        # HEAD value means that repository is at detached head.
        test "${CURRENT_BRANCH}" != "HEAD"

        # Switch to "detached HEAD" to make restore point.
        # Checking out commit id makes it "detached HEAD".
        # TODO: This can be improved using either temporary branches or stash.
        DETACHED_HEAD_COMMIT_ID="$(git rev-parse --verify HEAD)"
        git checkout "${DETACHED_HEAD_COMMIT_ID}"
        DETACHED_HEAD="$(git rev-parse --abbrev-ref HEAD)"
        test "${DETACHED_HEAD}" == "HEAD"
        # NOTE: The build branch will have to be fast-forward merged
        #       into the commit done in this "detached HEAD" next
        #       (and recorded in `RESTORE_POINT_COMMIT`)
        #       if no parent dynamic build descriptor is used.

        # NOTE: Without `add --all` `diff-index` will not notice untracked files.
        git add --all

        # Display status.
        git status

        # NOTE: In case of `RESTORE_PARENT_BUILD_ONLY`,
        #       there is nothing to do - operation stays read-only.
        if [ "${RESTORE_PARENT_BUILD_ONLY}" != "true" ]
        then

            # Commit only if there are changes.
            # Ignore dirty content in submodules because there is no way to
            # commit them from top-level repo anyway (and all dirty content
            # will be committed by children).
            git diff-index --ignore-submodules=dirty --exit-code HEAD || git commit --author "${AUTO_COMMIT_GIT_AUTHOR_EMAIL}" -m 'Auto-commit: restore point commit'
            RESTORE_POINT_COMMIT="$(git rev-parse --verify HEAD)"
            echo "$RESTORE_POINT_COMMIT" | python ${KEY_SETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "restore_point_commit_ids:{{ repo_name }}"

            # NOTE: Do not record `latest_commit_ids` here.
            #       Do it later when it is decided that it is part
            #       of the build branch.

            # Now check out `CURRENT_BRANCH` back.
            git checkout "${CURRENT_BRANCH}"
            CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
            # It still should point to `RECOVERY_BRANCH`.
            RECOVERY_BRANCH="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "recovery_branches:{{ repo_name }}")"
            test "${CURRENT_BRANCH}" == "${RECOVERY_BRANCH}"

        else

            # NOTE: Restore parent build only does not run any
            #       subsequent build. And it is fine (supported)
            #       that there are some local modifications.
            #       In any other case (when build is to be run after)
            #       these local modifications would simply be stored
            #       inside restore points.
            git status

            # And switch back to `CURRENT_BRANCH`.
            git checkout "${CURRENT_BRANCH}"
            CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"

        fi

        git reset

        cd -

        {% endif %}

        {% endfor %}

        #######################################################################
        # Update recovery descriptor.

        # The subsequent steps within the job may generate new commits
        # to the repositories. It is important to commit captured restore
        # points now without waiting until end of the script because script
        # may fail and no captured restore points will be available
        # for recovery.
        # Use current job dyn build desc as updated recovery descriptor.
        cp "${JOB_DYN_BUILD_DESC_PATH}" "${RECOVERY_DYN_BUILD_DESC_PATH}"

        #######################################################################
        # Branch all repositories based on dynamic build descriptor.

        {% for repo_name in pillar['system_features']['deploy_environment_sources']['source_repositories'].keys() %}
        {% set repo_config = pillar['system_features']['deploy_environment_sources']['source_repositories'][repo_name]['git'] %}

        {% if repo_name in pillar['system_features']['deploy_environment_sources']['repository_roles']['build_history_role'] %}

        # NOTE: There is no restore points for `build_history_role`.
        #       There must be no local modifications on start of the pipeline.

        {% else %}

        REPO_PATH="{{ get_system_host_primary_user_posix_home(repo_config['source_system_host']) }}/{{ repo_config['origin_uri_ssh_path'] }}"

        cd "${REPO_PATH}"

        CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
        # HEAD value means that repository is at detached head.
        test "${CURRENT_BRANCH}" != "HEAD"

        BUILD_BRANCH="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "build_branches:{{ repo_name }}")"
        REQUIRED_COMMIT_ID="$(python ${KEY_GETTER_PYTHON_SCRIPT} ${JOB_DYN_BUILD_DESC_PATH} "required_commit_ids:{{ repo_name }}")"
        test "${CURRENT_BRANCH}" != "${BUILD_BRANCH}"
        # NOTE: We reset (overwrite) build branch to its required commit.
        #       This is important as this build branch may already exist,
        #       for example, when checking out previous (parent) build
        #       branches is being done.
        git checkout -B "${BUILD_BRANCH}" "${REQUIRED_COMMIT_ID}"

        if [ "${PARENT_BUILD_TITLE}" != "_" ]
        then
            # Nothing to do. The restore point should not be part
            # of the build branch.
            echo "Switch to parent build branches without including restore point."

            # NOTE: The recovery commits are skipped altogether.
            #       They are not recorded in the `latest_commit_ids` because
            #       they are irrelevant for the build - the initial
            #       HEADs were switched into branches
            #       from parent dyn build desc.

        else
            # NOTE: Fast-forward merge newly created build branch to
            #       `RESTORE_POINT_COMMIT` because we are using
            #       current HEADs of all branches at the start of
            #       the pipeline except for bootstrap target pillars.
            #       Bootstrap target pillars are checked out clean and changes
            #       in restore point does not become part of the build.
            #       In fact, restore point may not ever ff-merge because
            #       pillars change to another branch (another profile).

            {% if repo_name not in get_repository_id_by_role('target_profile_pillars_role') %}

            RESTORE_POINT_COMMIT="$(python "${KEY_GETTER_PYTHON_SCRIPT}" "${JOB_DYN_BUILD_DESC_PATH}" "restore_point_commit_ids:{{ repo_name }}")"
            git merge --ff-only "${RESTORE_POINT_COMMIT}"

            # Record `latest_commit_ids`.
            CURRENT_COMMIT_ID="$(git rev-parse --verify HEAD)"
            test "${CURRENT_COMMIT_ID}" == "${RESTORE_POINT_COMMIT}"
            echo "${CURRENT_COMMIT_ID}" | python "${KEY_SETTER_PYTHON_SCRIPT}" "${JOB_DYN_BUILD_DESC_PATH}" "latest_commit_ids:{{ repo_name }}"

            {% else %}

            echo "Skip fast-forward merge to restore point to build package cleanly. TARGET_PROFILE_NAME=${TARGET_PROFILE_NAME:-}"

            {% endif %}

        fi

        cd -

        {% endif %}

        {% endfor %}

        #######################################################################
        # Update dynamic build descriptor.

        {{ update_dynamic_build_descriptor(job_config, job_environ) }}

        # One of the purposes of this job is to set recovery
        # dynamic build descriptor so that changes made to repositories
        # can be reverted to their state before this job.
        cp "${LATEST_DYN_BUILD_DESC_PATH}" "${RECOVERY_DYN_BUILD_DESC_PATH}"

        #######################################################################
        # Script footer

        {{ common_build_script_footer(job_config, job_environ) }}

        #######################################################################

      </command>
    </hudson.tasks.Shell>
  </builders>

  <publishers>

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import archive_artifacts with context %}
    {{ archive_artifacts(job_config, job_environ) }}

    {% from 'common/jenkins/configure_jobs_ext/common_xml_templates.lib.sls' import parameterized_job_triggers_macro with context %}
    {{ parameterized_job_triggers_macro(job_config, job_environ) }}

  </publishers>

  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.7.2"/>
  </buildWrappers>

</project>

