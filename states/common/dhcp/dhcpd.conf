# WARNING: This file is automatically generated. Adjust configuration tool
#           if you don't want to loose changes in the future.

# dhcpd.conf
#
# Sample configuration file for ISC dhcpd
#

{% set hostname_res = pillar['system_features']['hostname_resolution_config'] %}

# option definitions common to all supported networks...
# NOTE: use global parameters even though there is only one network and
#      it still re-uses the same parameters.
option domain-name "{{ hostname_res['domain_name'] }}";

{% if hostname_res['dns_server_type'] == 'managed' %}

{% set selected_minion_id = pillar['system_host_roles']['resolver-role']['assigned_hosts'][0] %}
{% set selected_host = pillar['system_hosts'][selected_minion_id] %}
{% set selected_net = selected_host['defined_in'] %}

option domain-name-servers {{ selected_host[selected_net]['ip'] }};

{% elif hostname_res['dns_server_type'] == 'external' %}

option domain-name-servers {{ hostname_res['external_dns_server'] }};

{% else %}

{{ FAIL_UNKNOWN_dns_server_type }}

{% endif %}

default-lease-time 600;
max-lease-time 7200;

# Use this to enble / disable dynamic dns updates globally.
#ddns-update-style none;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
#authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

# No service will be given on this subnet, but declaring it helps the 
# DHCP server to understand the network topology.
# NOTE: external network:
#      Avoid declaring subnet to disable listening on external network interface.
#subnet {{ salt['pillar.get']('external_net:subnet') }} netmask {{ salt['pillar.get']('external_net:netmask') }} {
#}

# This is a very basic subnet declaration.
# NOTE: not used
#subnet 10.254.239.0 netmask 255.255.255.224 {
#  range 10.254.239.10 10.254.239.20;
#  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
#}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.
# NOTE: not used
#subnet 10.254.239.32 netmask 255.255.255.224 {
#  range dynamic-bootp 10.254.239.40 10.254.239.60;
#  option broadcast-address 10.254.239.31;
#  option routers rtr-239-32-1.example.org;
#}

# A slightly different configuration for an internal subnet.
# NOTE: internal network:
subnet {{ pillar['internal_net']['subnet'] }} netmask {{ pillar['internal_net']['netmask'] }} {
  # Do not use range, assign IP based on MAC addresses
  # range 142.17.128 142.17.128;
  authoritative;
  option domain-name-servers {{ pillar['internal_net']['dns_server'] }};
  option domain-name "{{ hostname_res['domain_name'] }}";
  option routers {{ pillar['internal_net']['gateway'] }};
  option broadcast-address {{ pillar['internal_net']['broadcast'] }};
  default-lease-time 600;
  max-lease-time 7200;
}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.
# NOTE: not used
#host passacaglia {
#  hardware ethernet 0:0:c0:5d:bd:95;
#  filename "vmunix.passacaglia";
#  server-name "toccata.fugue.com";
#}

# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.
# NOTE: define all hosts on the internal network
{% for selected_host in pillar['system_hosts'].values() %}
{% if selected_host['defined_in'] == 'internal_net' %}
host {{ selected_host['hostname'] }} {
  hardware ethernet {{ selected_host['internal_net']['mac'] }};
  fixed-address {{ selected_host['internal_net']['ip'] }};
}
{% endif %}
{% endfor %}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.
# NOTE: not used
#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}
#
#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}

